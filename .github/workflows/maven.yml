name: Java CI with Maven
on: 
  # Jenkins Build Trigger: Polling SCM every 4 minutes for changes
  # GitHub Action: Trigger on push to master branch.
  push:
    branches: [ "master" ]
  workflow_dispatch: # Allow you to manually trigger work flow

jobs:
  build:
    # GitHub-hosted Runner. 
    # GHES, use our own runner.
    runs-on: ubuntu-latest

    steps:
    
    # Jenkins Source Code Mangement: SVN 
    # GHA: Check out project from Git Repo
    - uses: actions/checkout@v4 
      with:
        fetch-depth: '0' # To get all commit history
        
    # Set up Java
    - name: Set up JDK 17
      uses: actions/setup-java@v4 
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    # Cache to improve the workflow execution time    
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

     # GlobalRecondoMavenSettings.xml
    - name: Create .m2/settings.xml
      run: |
        mkdir -p ~/.m2
        echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" > ~/.m2/settings.xml
        echo "<settings>" >> ~/.m2/settings.xml
        echo "  <mirrors>" >> ~/.m2/settings.xml
        echo "    <mirror>" >> ~/.m2/settings.xml
        echo "      <id>artifactory-release</id>" >> ~/.m2/settings.xml
        echo "      <mirrorOf>central</mirrorOf>" >> ~/.m2/settings.xml
        echo "      <url>https://trialzjb0sy.jfrog.io/artifactory/recondo-demo-libs-release</url>" >> ~/.m2/settings.xml
        echo "      <blocked>false</blocked>" >> ~/.m2/settings.xml
        echo "    </mirror>" >> ~/.m2/settings.xml
        echo "    <mirror>" >> ~/.m2/settings.xml
        echo "      <id>artifactory-snapshot</id>" >> ~/.m2/settings.xml
        echo "      <mirrorOf>external:*</mirrorOf>" >> ~/.m2/settings.xml
        echo "      <url>https://trialzjb0sy.jfrog.io/artifactory/recondo-demo-libs-snapshot</url>" >> ~/.m2/settings.xml
        echo "      <blocked>false</blocked>" >> ~/.m2/settings.xml
        echo "    </mirror>" >> ~/.m2/settings.xml
        echo "  </mirrors>" >> ~/.m2/settings.xml
        echo "  <servers>" >> ~/.m2/settings.xml
        echo "    <server>" >> ~/.m2/settings.xml
        echo "      <id>artifactory-release</id>" >> ~/.m2/settings.xml
        echo "      <username>${{ secrets.JFROG_USER }}</username>" >> ~/.m2/settings.xml
        echo "      <password>${{ secrets.JFROG_PASSWORD }}</password>" >> ~/.m2/settings.xml
        echo "    </server>" >> ~/.m2/settings.xml
        echo "    <server>" >> ~/.m2/settings.xml
        echo "      <id>artifactory-snapshot</id>" >> ~/.m2/settings.xml
        echo "      <username>${{ secrets.JFROG_USER }}</username>" >> ~/.m2/settings.xml
        echo "      <password>${{ secrets.JFROG_PASSWORD }}</password>" >> ~/.m2/settings.xml
        echo "    </server>" >> ~/.m2/settings.xml
        echo "  </servers>" >> ~/.m2/settings.xml
        echo "  <profiles>" >> ~/.m2/settings.xml
        echo "    <profile>" >> ~/.m2/settings.xml
        echo "      <id>artifactory</id>" >> ~/.m2/settings.xml
        echo "      <repositories>" >> ~/.m2/settings.xml
        echo "        <repository>" >> ~/.m2/settings.xml
        echo "          <id>recondo-demo-libs-release</id>" >> ~/.m2/settings.xml
        echo "          <url>https://trialzjb0sy.jfrog.io/artifactory/recondo-demo-libs-release</url>" >> ~/.m2/settings.xml
        echo "          <releases>" >> ~/.m2/settings.xml
        echo "            <enabled>true</enabled>" >> ~/.m2/settings.xml
        echo "          </releases>" >> ~/.m2/settings.xml
        echo "        </repository>" >> ~/.m2/settings.xml
        echo "        <repository>" >> ~/.m2/settings.xml
        echo "          <id>recondo-demo-libs-snapshot</id>" >> ~/.m2/settings.xml
        echo "          <url>https://trialzjb0sy.jfrog.io/artifactory/recondo-demo-libs-snapshot</url>" >> ~/.m2/settings.xml
        echo "          <snapshots>" >> ~/.m2/settings.xml
        echo "            <enabled>true</enabled>" >> ~/.m2/settings.xml
        echo "          </snapshots>" >> ~/.m2/settings.xml
        echo "        </repository>" >> ~/.m2/settings.xml
        echo "      </repositories>" >> ~/.m2/settings.xml
        echo "    </profile>" >> ~/.m2/settings.xml
        echo "  </profiles>" >> ~/.m2/settings.xml
        echo "  <activeProfiles>" >> ~/.m2/settings.xml
        echo "    <activeProfile>artifactory</activeProfile>" >> ~/.m2/settings.xml
        echo "  </activeProfiles>" >> ~/.m2/settings.xml
        echo "</settings>" >> ~/.m2/settings.xml

    #   # Upload Maven build artifacts to GitHub Actions Artifacts
    # - name: Upload settings file artifacts
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: maven-artifacts
    #     path: |
    #       ~/.m2/settings.xml
         

    # Jenkins Prestep:
    # GET_SVN_LOG.sh - script gets last 90 days of checkins and writes them to a 
    # file called: "svn_" + {service name} + "." + {svn revision #} + ".log"
    # GHA: Run git log to get the 90 
    - name: Get Commits for the Last 90 Days
      run: |
       Calculate the date 90 days ago
       START_DATE=$(date +"%Y-%m-%d" -d "-90 days")
       Fetch commits for the last 90 days and write to a log file
       git log --since="$START_DATE" --pretty=format:"Commit: %H%nAuthor: %an <%ae>%nDate: %ad%nMessage: %s%nChanged files:" --date=short --name-only | awk 'BEGIN {FS="n"} {if ($0 ~ /Changed files:/) {print $0} else {print " "$0}}' >  ${{ github.event.repository.name }}_commits_last_90_days.log
    - name: Upload Commit Log as Artifact
      uses: actions/upload-artifact@v4
      with:
       name: ${{ github.event.repository.name }} Commits Last 90 Days Log
       path: ${{ github.event.repository.name }}_commits_last_90_days.log
    
    # Jenkins: clean install -U
    # Build, test, code coverage, depdency check
    - name: Build with Maven
      run: mvn clean install -U

    # JENKINS: Post steps: Run only if build is succeeds
    # By default, a GitHub Actions workflow will stop if a step fails
    # JENKINS: Set email notifcation to specific receipents.
    # GITHUB: Only sends email to the receipent who triggered the workflow.

    # Post-build Actions: 
    # 1. Deploy artifacts to Artifactory 
    # 2. Record Code Coverage Report
    # 3. Publish Dependency Check Results

    - name: Deploy artifacts to Artifactory
      run: mvn deploy

    - name: Upload JaCoCo Code Coverage Report
      uses: actions/upload-artifact@v4
      with:
        name: JaCoCo Code Coverage Report
        path: target/site/jacoco/
        if-no-files-found: error
        retention-days: 90   # DEFAULT 90 days, Enterprise can confiture up to 400 days
   
    - name: Upload Dependency Check Report
      uses: actions/upload-artifact@v4
      with:
        name: Dependency Check Report
        path: target/dependency-check-report.html
        if-no-files-found: error
        retention-days: 90   # DEFAULT 90 days, Enterprise can confiture up to 400 days
