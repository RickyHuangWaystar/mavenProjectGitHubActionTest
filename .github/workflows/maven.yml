name: Java CI with Maven

# TRIGGERS
on: 
  # Jenkins: Polling SCM every 4 minutes for changes
  # Trigger on push or pr to master branch
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch: # Run manually

# JOBS
jobs:
  build:
    # GitHub-hosted Runner
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4 
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

name: Run SVN to GitHub Migration Script

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  run-script:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Git
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'

    - name: Run script
      env:
        GITHUB_URL: ${{ secrets.GITHUB_URL }}
      run: |
        # Fetch the latest commit hash
        LATEST_COMMIT_HASH=$(git ls-remote $GITHUB_URL refs/heads/main | awk '{print $1}')

        # Parse the GitHub URL
        PARSED_PATH=$(echo $GITHUB_URL | sed 's#.*/##')
        echo "PARSED_PATH = " $PARSED_PATH

        SERVICE_NAME=$(echo $PARSED_PATH | sed 's/\/.*$//')
        echo "SERVICE_NAME = " $SERVICE_NAME

        # Rename actions to match the expected name format
        if [ "$SERVICE_NAME" == "portal" ] ; then
            SERVICE_NAME="portal-entrypoint"
        fi

        if [ "$SERVICE_NAME" == "gridDal" ] ; then
            SERVICE_NAME="gridDalService"
        fi

        # Define the start date range for logs (90 days ago)
        GIT_START_DATE=$(date -d "-90 days" +"%Y-%m-%d")

        # Clone the repository
        git clone $GITHUB_URL
        cd $(basename $GITHUB_URL .git)

        # Save logs to a file
        git log --since="$GIT_START_DATE" --until="now" --pretty=format:"%h %ad | %s%d [%an]" --date=short > git_$SERVICE_NAME.$LATEST_COMMIT_HASH.log

        GIT_ARGS="log --since=\"$GIT_START_DATE\" --until=\"now\" --pretty=format:\"%h %ad | %s%d [%an]\" --date=short"
        echo "GIT_ARGS = " $GIT_ARGS


        
        
    # Cache to improve the workflow execution time    
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    # Jenkins: clean install -U -P test-coverage
    # TODO What is test-coverage profile
    # TODO What is GlobalRecondoMavenSettings.xml
    # BUILD, RUN UNIT TEST, RUN JaCoCo, Run Dependency Check
    - name: Build with Maven
      run: mvn clean install -U

    # JENKINS: Post steps: Run only if build is succee
    # By default, a GitHub Actions workflow will stop if a step fails
    # JENKINS: Set email notifcation to specific receipents.
    # GITHUB: Only sends email to the receipent who triggered the workflow.

    # Code Coverage Report
    - name: Upload JaCoCo Code Coverage Report
      uses: actions/upload-artifact@v4
      with:
        name: JaCoCo Code Coverage Report
        path: target/site/jacoco/

    # Depdendency Vulnerability Analysis
    - name: Upload Dependency Check Report
      uses: actions/upload-artifact@v4
      with:
        name: Dependency Check Report
        path: target/dependency-check-report.html
        if-no-files-found: error
        retention-days: 90

    # TODO DEPLOY ARTIFACTS to Artifcatory

